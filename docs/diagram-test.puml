@startuml

!define TRANSACTION_MARK_COLOR DarkSeaGreen
!define ENTITY_COLOR LightBlue
!define SERVICE_COLOR LightGoldenrodYellow

skinparam class {
  BackgroundColor Snow
  BorderColor Black
}

skinparam stereotypeCBackgroundColor Black
skinparam stereotypeCBorderColor Black

package "Realização do pedido e pagamento" {
  package "Cliente" {
    class Cliente <<(E, LightBlue)>> {
      +CPF: string
      +Nome: string
      +Email: string
      +Document: string
      +Password: string
      +CreatedAt: string
    }
    class Pedido <<(T, DarkSeaGreen)>> {
      +Itens: list<Produto>
      +Status: string
      +ValorTotal: decimal
      +realizarPagamento(): bool
    }
    class Produto <<(E, LightBlue)>> {
      +Nome: string
      +Descrição: string
      +Preço: decimal
      +Categoria: string
      +CaminhoImagem: string
    }
    Cliente -- Pedido
    Pedido ..> Produto: <<contains>>
  }

  package "Pagamento" {
    class Pagamento <<(S, LightGoldenrodYellow)>> {
      +formaPagamento: string
      +createdAt: string
      +gerarQRCode(): string
      +verificarPagamento(): bool
    }
    Pagamento ..> Pedido
  }

  Cliente "1" --> "1..*" Pedido
  Pedido "1" --> "0..*" Produto

  note left of Cliente
    O cliente realiza um pedido
    e realiza o pagamento.
  end note
}

package "Preparação e entrega do pedido" {
  package "Monitor da Cozinha" {
    class MonitorCozinha <<(S, LightGoldenrodYellow)>> {
      +prepararPedido(pedido: Pedido): void
    }
    MonitorCozinha ..> Pedido
  }

  package "Monitor do cliente" {
    class MonitorCliente <<(S, LightGoldenrodYellow)>> {
      +exibirStatusPedido(pedido: Pedido): void
    }
    MonitorCliente ..> Pedido
  }

  package "Entrega" {
    class Entrega <<(S, LightGoldenrodYellow)>> {
      +notificarPedidoPronto(pedido: Pedido): void
      +atualizarStatusPedido(pedido: Pedido, status: string): void
    }
    Entrega ..> Pedido
  }

  package "Acesso administrativo" {
    class Administrador <<(E, LightBlue)>> {
      +gerenciarClientes(): void
      +gerenciarProdutosECategorias(): void
      +acompanharPedidosEmAndamento(): void
      +gerenciarInformacoes(): void
    }
    Administrador --> Pedido
  }

  MonitorCliente ..> Pedido: <<monitores>>
  MonitorCozinha ..> Pedido: <<usos>>
  Entrega ..> Pedido: <<usos>>
}

@enduml
