openapi: 3.0.3
info:
  title: Tech Challange
  description: |-
    Tech Challenge Swagger
  version: 1.0.0
servers:
  - url: https://localhost/api
tags:
  - name: user
    description: User management
  - name: product
    description: Product management
  - name: order
    description: Order Management
paths:
  /user/create:
    post:
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'  
  /user/login:
    post:
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'  
  /user/bypass:
    post:
      tags:
        - user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'  
  /product:
    get:
      security:
        - bearerAuth: []
      tags:
        - product
      description: Get producs. May filter by id or category.
      parameters:
        - name: id
          in: query
          description: product ID
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: product category
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'  
    post:
      security:
        - bearerAuth: []
      tags:
        - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductItem'
        required: true
      responses:
        '201':
          description: Successfully created
    put:
      security:
        - bearerAuth: []
      tags:
        - product
      parameters:
        - name: id
          in: query
          description: product ID
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductItem'
        required: true
      responses:
        '200':
          description: Successful operation
    delete:
      security:
        - bearerAuth: []
      tags:
        - product
      parameters:
        - name: id
          in: query
          description: product ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
  /order:
    get:
      security:
        - bearerAuth: []
      tags:
        - order
      description: Get orders. May filter by id or status.
      parameters:
        - name: id
          in: query
          description: order ID
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: order status
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
  /order/checkout:
    post:
      security:
        - bearerAuth: []
      tags:
        - order
      parameters:
        - name: id
          in: query
          description: order ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      responses:
        '200':
          description: Successful operation
components:
  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
    UserRequest:
      type: object
      properties:
        document:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: string
        document:
          type: string
        name:
          type: string
        email:
          type: string
    ProductList:
      type: array
      items:
        $ref: '#/components/schemas/ProductItem'
    ProductItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: string
        category:
          type: string
        status:
          type: string
        imagePath:
          type: string
    OrderList:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    Order:
      type: object
      properties:
        id: 
          type: string
        customerID:
          type: string
        paymentID:
          type: string
        status:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        total:
          type: integer
        orderItems:
          $ref: '#/components/schemas/OrderItem'
    OrderItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ProductItem'
        quantity:
          type: integer
    Payment:
      type: object
      properties:
        id:
          type: string
        paymentType:
          type: string
        createdAt:
          type: string
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary v
security:
  - bearerAuth: []
  